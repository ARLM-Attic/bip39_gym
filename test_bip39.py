"""Unit tests for bip39.py"""
#Python Standard Library 2.7
import unittest
import json

import bip39 #bip39.py

TEST_VECTOR_FILE = 'data/vectors.json'
IAN_VECTOR_FILE = 'data/random_vectors.json'

class Bip39ToolVectorTest(unittest.TestCase):
    """Validate vectors using data generated by Ian Coleman BIP39 tool"""
    def setUp(self):
        if not hasattr(self, 'data'):
            with open(IAN_VECTOR_FILE, 'r') as vector_file:
                print "Loaded vector data from {0}".format(IAN_VECTOR_FILE)
                self.data = json.load(vector_file)['data']
    def tearDown(self):
        pass

    def test_bin_to_mnemonic(self):
        """Given test entropy, derive and match test mnemonic"""
        assert len(self.data) == 4
        for vector in self.data:
            entropy_bin = vector['entropy_binary']
            test_mnemonic = vector['mnemonic']
            computed_mnemonic = bip39.binstring2mnemonic(entropy_bin)
            self.assertEqual(test_mnemonic, computed_mnemonic)

    def test_bin_to_mnemonic_mismatch(self):
        """Flip a bit in the test data and verify mnemonic doesn't match"""
        for vector in self.data:
            entropy_bin = vector['entropy_binary']
            test_mnemonic = vector['mnemonic']
            last = entropy_bin[-1:]
            assert last in ("0", "1")
            flipped = "0" if last == "1" else "1"
            entropy_bin_modified = entropy_bin[:-1] + flipped
            computed_mnemonic = bip39.binstring2mnemonic(entropy_bin_modified)
            self.assertNotEqual(test_mnemonic, computed_mnemonic)

    def test_mnemonic_to_bin(self):
        """Given test mnemonic, derive and match entropy as bit string"""
        assert len(self.data) == 4
        for vector in self.data:
            entropy_bin = vector['entropy_binary']
            test_mnemonic = vector['mnemonic']
            entropy_bin_calc = bip39.mnemonic2binstring(test_mnemonic)
            self.assertEqual(entropy_bin, entropy_bin_calc)

    def test_mnemonic_to_bin_mismatch(self):
        """Flip a bit in the test data and verify the mnemonic doesn't match"""
        assert len(self.data) == 4
        for vector in self.data:
            entropy_bin = vector['entropy_binary']
            test_mnemonic = vector['mnemonic']
            last = entropy_bin[-1:]
            assert last in ("0", "1")
            flipped = "0" if last == "1" else "1"
            entropy_bin_modified = entropy_bin[:-1] + flipped
            entropy_bin_calc = bip39.mnemonic2binstring(test_mnemonic)
            self.assertNotEqual(entropy_bin_modified, entropy_bin_calc)


class Bip39VectorTest(unittest.TestCase):
    """Run through vectors up to mnemonic generation using Trezor test vectors"""

    def setUp(self):
        if not hasattr(self, 'data'):
            with open(TEST_VECTOR_FILE, 'r') as vector_file:
                print "Loaded vector data from {0}".format(TEST_VECTOR_FILE)
                self.data = json.load(vector_file)['english']
                # [raw hex, mnemonic, seed, xprv]

    def tearDown(self):
        pass

    def test_hex_to_mnemonic(self):
        """Reproduce all mnemonics in test vectors from hex"""
        for vector in self.data:
            hex_string = vector[0]
            mnemonic = vector[1]

            bin_string = bip39.hex2bin(hex_string)
            computed_mnemonic = bip39.binstring2mnemonic(bin_string)
            self.assertEqual(mnemonic, computed_mnemonic)

class FunctionTest(unittest.TestCase):
    """Test various helper functions"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_hex2bin_valid(self):
        """Compute binary string using various valid hex string arguments"""

        self.assertEqual(bip39.hex2bin("0"), "0000")
        self.assertEqual(bip39.hex2bin("00"), "00000000")
        self.assertEqual(bip39.hex2bin("1"), "0001")
        self.assertEqual(bip39.hex2bin("01"), "00000001")
        self.assertEqual(bip39.hex2bin("a"), "1010")

        self.assertEqual(bip39.hex2bin('0' * 4), '0' * 16)
        self.assertEqual(bip39.hex2bin('0' * 8), '0' * 32)
        self.assertEqual(bip39.hex2bin('0' * 16), '0' * 64)
        self.assertEqual(bip39.hex2bin('0' * 32), '0' * 128)
        self.assertEqual(bip39.hex2bin('0' * 31), '0' * 124)

        self.assertEqual(bip39.hex2bin('f'), '1' * 4)
        self.assertEqual(bip39.hex2bin('f' * 2), '1' * 8)
        self.assertEqual(bip39.hex2bin('f' * 3), '1' * 12)
        self.assertEqual(bip39.hex2bin('f' * 32), '1' * 128)
        self.assertEqual(bip39.hex2bin('f' * 64), '1' * 256)

    def test_hex2bin_invalid(self):
        """Test function with invalid arugments"""
        #Not a valid hex letter
        with self.assertRaises(Exception):
            bip39.hex2bin("g")

        #Empty string
        with self.assertRaises(Exception):
            bip39.hex2bin("")

        #Not a string
        with self.assertRaises(Exception):
            bip39.hex2bin(0)

    def test_binstring2word_index_valid(self):
        """Test function with valid arguments"""
        self.assertEqual(bip39.binstring2word_index('00000000000'), [0])
        self.assertEqual(bip39.binstring2word_index('00000000001'), [1])
        self.assertEqual(bip39.binstring2word_index('11111111111'), [2047])

        self.assertEqual(bip39.binstring2word_index(
            '000000000000000000000111111111111'), [0, 1, 2047])

    def test_get_word_from_index_valid(self):
        """Test function with valid arugments"""
        self.assertEqual(bip39.get_word_from_index(0), 'abandon')
        self.assertEqual(bip39.get_word_from_index(189), 'bless')
        self.assertEqual(bip39.get_word_from_index(1525), 'salt')
        self.assertEqual(bip39.get_word_from_index(2047), 'zoo')

    def test_get_word_from_index_invalid(self):
        """Test function with valid arugments"""
        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.get_word_from_index(-1)
        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.get_word_from_index(2048)

    def test_get_mnemonic_valid(self):
        """Test function with valid arugments"""
        self.assertEqual(bip39.get_mnemonic([0]), 'abandon')
        self.assertEqual(bip39.get_mnemonic([0, 0]), 'abandon abandon')
        self.assertEqual(bip39.get_mnemonic([0, 1, 2047]), 'abandon ability zoo')

    def test_get_mnemonic_invalid(self):
        """Test function with invalid arguments"""
        with self.assertRaises(ValueError):
            bip39.get_mnemonic([])
        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.get_mnemonic([-1])
        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.get_mnemonic([2048])

    def test_dec2bin_valid(self):
        """Compute binary string using various valid arguments"""

        self.assertEqual(bip39.dec2bin(0), "0")
        self.assertEqual(bip39.dec2bin(1), "1")
        self.assertEqual(bip39.dec2bin(2), "10")
        self.assertEqual(bip39.dec2bin(00), "0")

        self.assertEqual(bip39.dec2bin(0, zero_padding=7), "0000000")
        self.assertEqual(bip39.dec2bin(1, zero_padding=7), "0000001")
        self.assertEqual(bip39.dec2bin(0b111, zero_padding=3), "111")

    def test_dec2bin_invalid(self):
        """Test function with invalid arugments"""
        with self.assertRaises(bip39.InvalidIntValueError):
            bip39.dec2bin("a")

        with self.assertRaises(bip39.InvalidIntValueError):
            bip39.dec2bin("")

        with self.assertRaises(bip39.InvalidIntValueError):
            bip39.dec2bin(-1)

    def test_get_index_from_word_valid(self):
        """Test function with valid BIP39 words"""
        wordlist = bip39.get_wordlist()
        assert len(wordlist) == 2048
        self.assertEqual(bip39.get_index_from_word('abandon'), 0)
        self.assertEqual(bip39.get_index_from_word('zoo'), 2047)

    def test_get_index_from_word_invalid(self):
        """Test function with word not in dictonary"""
        with self.assertRaises(bip39.InvalidWordError):
            bip39.get_index_from_word('maximalism')

    def test_get_indices_valid(self):
        """Test function with valid bip39 words"""
        self.assertEqual(bip39.get_indices('abandon'), [0])
        self.assertEqual(bip39.get_indices('abandon ability'), [0, 1])
        self.assertEqual(bip39.get_indices('abandon ability zoo'), [0, 1, 2047])

    def test_get_indices_invalid(self):
        """Test function with invalid words"""
        with self.assertRaises(ValueError):
            bip39.get_indices('')

        with self.assertRaises(bip39.InvalidWordError):
            bip39.get_indices('mimble wimble')

    def test_word_index2binstring_valid(self):
        """Test function with valid indexes"""
        self.assertEqual(bip39.word_index2binstring(0), '00000000000')
        self.assertEqual(bip39.word_index2binstring(1), '00000000001')
        self.assertEqual(bip39.word_index2binstring(2047), '11111111111')

    def test_word_index2binstring_invalid(self):
        """Test function with invalid indices"""
        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.word_index2binstring(-1)

        with self.assertRaises(bip39.WordNotDefinedAtIndexError):
            bip39.word_index2binstring(2048)

    def test_mnemonic2binstring_valid(self):
        """Test function with valid bip39 mnemonics"""
        self.assertEqual(
            bip39.mnemonic2binstring('voice catch possible'),
            '11110101011001001000001010100010')

    def test_mnemonic2binstring_invalid(self):
        """Test function with invalid bip39 mnemonics"""
        with self.assertRaises(ValueError):
            bip39.mnemonic2binstring('')

        with self.assertRaises(bip39.InvalidWordError):
            bip39.mnemonic2binstring('mimble wimble')

        #bad checksum
        with self.assertRaises(bip39.FailedCheckSumError):
            bip39.mnemonic2binstring('town iron abandon')

    def test_bin2hex_valid(self):
        """Test function with valid binary strings"""
        self.assertEqual(bip39.bin2hex('0'), '0')
        self.assertEqual(bip39.bin2hex('1'), '1')
        self.assertEqual(bip39.bin2hex('11'), '3')
        self.assertEqual(bip39.bin2hex('0011'), '3')
        self.assertEqual(bip39.bin2hex('1111'), 'f')
        self.assertEqual(bip39.bin2hex('00001111'), '0f')
        self.assertEqual(bip39.bin2hex('0' * 2), '0')
        self.assertEqual(bip39.bin2hex('01'), '1')
        self.assertEqual(bip39.bin2hex('0' * 4), '0')
        self.assertEqual(bip39.bin2hex('0' * 5), '00') #2 hex digits
        self.assertEqual(bip39.bin2hex('00001'), '01') #2 hex digits
        self.assertEqual(bip39.bin2hex('1' * 256), 'f' * 64) #64 hex digits
        self.assertEqual(bip39.bin2hex('0' * 256), '0' * 64) #64 hex digits

    def test_bin2hex_invalid(self):
        """Test function with invalid args"""
        with self.assertRaises(ValueError):
            bip39.bin2hex(1)

        with self.assertRaises(ValueError):
            bip39.bin2hex("012")
